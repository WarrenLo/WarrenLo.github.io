var app=new Vue({el:"#app",data:{canvas:null,canvasSize:{width:300,height:300},activeObj:null,activeObjData:null,activeObjId:null,allDatas:[],currentData:{id:null,svgPath:[]},mouse:{down:!1,dragging:!1,position:{x:0,y:0}},mode:"hand",modeOptions:[{type:"hand",font:"Hand"},{type:"bezierCurve",font:"Bezier Curve"},{type:"line",font:"Line"},{type:"detect",font:"Detect"}]},watch:{activeObjId:{immediate:!1,deep:!0,handler:function(t,i){if(this.removeObjectByName("bezierPoint"),this.removeObjectByName("line"),this.activeObj=this.findObjectById(t),this.activeObjData=this.findObjectDataById(t),this.activeObj&&this.activeObj.set("stroke","blue"),i){const t=this.findObjectById(i);if(!t)return;const e=this.findObjectDataById(i);e.showNodes&&(e.showNodes=!1),t.set("stroke","black")}}},mode:{immediate:!1,deep:!0,handler:function(t,i){this.activeObjId=null,this.removeObjectByName("customCursor"),this.removeObjectByName("previewPath"),this.removeObjectByName("bezierPoint"),this.removeObjectByName("line"),"hand"===t&&(this.currentData.svgPath=[],this.currentData.id=null)}}},mounted(){this.canvasSize.width=.95*window.innerWidth,this.canvasSize.height=.7*window.innerHeight,this.initCanvas()},methods:{switchMode(t){this.mode=t},initCanvas(){this.canvas=new fabric.Canvas("canvas",{width:this.canvasSize.width,height:this.canvasSize.height,backgroundColor:"#eeeeec",selection:!1}),this.canvas.on({"mouse:down":this.mousedown,"mouse:up":this.mouseup,"mouse:dblclick":this.mousedblclick,"mouse:wheel":this.mousewheel,"mouse:move":this.mousemove,"mouse:out":this.mouseout})},mouseout(t){this.removeObjectByName("previewPath"),this.removeObjectByName("customCursor")},mousedown(t){switch(this.mouse.down=!0,this.mode){case"hand":t.target||(this.activeObjId=null);break;case"bezierCurve":case"line":this.recordBezierCurveData(t),this.drawPath({svgPath:this.currentData.svgPath,stroke:"blue"})}},mouseup(t){this.mouse.down=!1,this.mouse.dragging=!1},mousedblclick(t){},mousewheel(t){},mousemove(t){switch(this.mouse.down&&(this.mouse.dragging=!0),this.mode){case"hand":break;case"bezierCurve":{let{x:i,y:e}=t.absolutePointer;if(this.currentData.svgPath.length>1){const t=this.currentData.svgPath[0],s={x:t.points[0],y:t.points[1]};this.calDistBetweenTwoPoints({x:i,y:e},s)<5?(i=s.x,e=s.y,this.finish=!0):this.finish=!1}this.recordMousePosition({x:i,y:e}),this.customCursor(),this.updateBezierCurveData(),this.drawPreviewPath();break}case"line":{let{x:i,y:e}=t.absolutePointer;this.recordMousePosition({x:i,y:e}),this.customCursor(),this.drawPreviewPath();break}case"detect":{let{x:i,y:e}=t.absolutePointer;this.recordMousePosition({x:i,y:e}),this.detectObj(),this.customCursor();break}}},detectObj(){let t={point:null,id:null};this.allDatas.forEach(i=>{i.buffer.forEach(e=>{this.calDistBetweenTwoPoints(e,this.mouse.position)<5&&(t.point=e,t.id=i.id)})}),t.id?(this.activeObjId=t.id,this.recordMousePosition(t.point)):this.activeObjId=null},keydown(t){switch(t.code){case"Escape":this.updateAllData(),this.activeObjId=null,this.switchMode("hand");break;case"Delete":this.deleteObj(this.activeObjId)}},deleteObj(t){t&&(this.removeObjectById(t),this.removeDataById(t),this.activeObjId=null)},removeObjectById(t){this.canvas._objects.filter(i=>i.id===t).forEach(t=>this.canvas.remove(t))},removeDataById(t){this.allDatas=this.allDatas.filter(i=>i.id!==t)},updateAllData(){if(this.currentData.svgPath.length<1||!this.currentData.id)return;this.removeObjectByName("bezierPoint"),this.removeObjectByName("bezierCurve");const t=_.cloneDeep(this.currentData);t.mode=this.mode,"line"===t.mode&&(t.length=this.calPathLength(t.svgPath)),this.allDatas.push(t),this.currentData.svgPath.length=0,this.currentData.id=null,this.allDatas.forEach(t=>{this.drawPath({svgPath:t.svgPath,id:t.id,name:`allPath_${t.id}`}),t.buffer=this.calAllBezierPoints(t.svgPath)}),this.finish=!1},calDistBetweenTwoPoints:(t,i)=>Math.sqrt(Math.pow(t.x-i.x,2)+Math.pow(t.y-i.y,2)),calPathLength(t){const i=t[0],e=t[t.length-1],s={x:i.points[this.pointPosition(i).x],y:i.points[this.pointPosition(i).y]},n={x:e.points[this.pointPosition(e).x],y:e.points[this.pointPosition(e).y]};return this.calDistBetweenTwoPoints(s,n).toFixed(2)},updateBezierCurveData(){if(!this.mouse.dragging)return;if(this.currentData.svgPath.length<2)return;const t=this.currentData.svgPath[this.currentData.svgPath.length-1];t.points[this.pointPosition(t).c2x]=2*t.points[this.pointPosition(t).x]-this.mouse.position.x,t.points[this.pointPosition(t).c2y]=2*t.points[this.pointPosition(t).y]-this.mouse.position.y,this.bezierCurveCreator.controlPoint.x=this.mouse.position.x,this.bezierCurveCreator.controlPoint.y=this.mouse.position.y,this.drawPath({svgPath:this.currentData.svgPath,stroke:"blue"})},recordMousePosition({x:t,y:i}){this.mouse.position={x:t,y:i}},customCursor(){this.removeObjectByName("customCursor"),this.cursor=new fabric.Circle({name:"customCursor",top:this.mouse.position.y,left:this.mouse.position.x,radius:5,fill:"transparent",stroke:"blue",strokeWidth:1,selectable:!1,hasBorder:!1,hasControls:!1,hoverCursor:"defalut",originX:"center",originY:"center"}),this.canvas.add(this.cursor)},recordBezierCurveData(t){const{x:i,y:e}=this.mouse.position;let s={};0===this.currentData.svgPath.length?(s={type:"M",points:[i,e]},this.currentData.id=(new Date).valueOf()):"bezierCurve"===this.mode?s={type:"C",points:[this.bezierCurveCreator.controlPoint.x,this.bezierCurveCreator.controlPoint.y,i,e,i,e]}:"line"===this.mode&&(s={type:"L",points:[i,e]},this.finish=!0),this.currentData.svgPath.push(s),this.bezierCurveCreator={startPoint:{x:i,y:e},controlPoint:{x:i,y:e}},this.drawPoint({x:i,y:e}),this.finish&&this.updateAllData()},drawBezierPoint({x:t,y:i,stroke:e,fill:s,radius:n,info:o,movingFun:a,movedFun:h}){const r=this.drawPoint({x:t,y:i,stroke:e,fill:s,radius:n,add:!1});r.info=o,r.on("moving",a),r.on("moved",h),this.canvas.add(r)},drawPoint({x:t,y:i,stroke:e="grey",fill:s="white",radius:n=4,name:o="bezierPoint",add:a=!0}){const h=new fabric.Circle({name:o,top:i,left:t,radius:n,stroke:e,fill:s,selectable:!0,hasBorder:!1,hasControls:!1,originX:"center",originY:"center",hoverCursor:"default",padding:1});return a&&this.canvas.add(h),h},drawPath({svgPath:t,id:i,name:e="bezierCurve",stroke:s="black"}){if(t.length<2)return;this.removeObjectByName(e);const n=this.convertSvgDataIntoPath(t),o=new fabric.Path(n,{id:i,name:e,stroke:s,fill:"transparent",selectable:!0,hasControls:!1,hoverCursor:"default"});o.on("mousedblclick",this.mousedblclickObj.bind(this)),o.on("mousedown",this.mousedownObj.bind(this)),o.on("moved",this.movedObj.bind(this)),o.on("moving",this.movingObj.bind(this));[o.width,o.height].some(t=>{if(t<20)return o.padding=20-t}),this.canvas.add(o),o.sendToBack()},movingObj(t){t.target&&(this.removeObjectByName("bezierPoint"),this.removeObjectByName("line"))},mousedblclickObj(t){if(!t.target)return;const i=this.findObjectDataById(t.target.id);i.showNodes=!0,this.renderNodes(i),this.canvas._activeObject=null},mousedownObj(t){t.target&&(this.activeObjId=this.canvas._activeObject?this.canvas._activeObject.id:null,this.movement={x:t.target.left,y:t.target.top})},movedObj(t){if(!t.target)return;this.movement.x=t.target.left-this.movement.x,this.movement.y=t.target.top-this.movement.y;const i=this.findObjectDataById(t.target.id);i.svgPath.forEach(t=>{t.points.forEach((i,e)=>{t.points[e]+=e%2==0?this.movement.x:this.movement.y})}),i.showNodes&&this.renderNodes(i),i.buffer=this.calAllBezierPoints(i.svgPath)},renderNodes({svgPath:t,id:i}){this.removeObjectByName("bezierPoint"),this.removeObjectByName("line"),t.forEach((t,e,s)=>{const n={id:i,type:t.type,indexPath:e};switch(t.type){case"M":case"L":t.points.forEach((i,e)=>{e%2==1&&this.drawBezierPoint({x:t.points[e-1],y:i,info:{...n,indexPoint:e-1},movingFun:this.movingTerminalPoint.bind(this),movedFun:this.movedTerminalAndControlPoint.bind(this)})});break;case"C":t.points.forEach((i,o)=>{if(o%2==1){if(0!==e){if(1===o){const n=s[e-1],a={x:n.points[n.points.length-2],y:n.points[n.points.length-1]};this.drawLine({p1:a,p2:{x:t.points[o-1],y:i}})}if(o===t.points.length-1){const e={x:t.points[o-3],y:t.points[o-2]};this.drawLine({p1:e,p2:{x:t.points[o-1],y:i}})}}o===t.points.length-1?this.drawBezierPoint({x:t.points[o-1],y:i,info:{...n,indexPoint:o-1},movingFun:this.movingTerminalPoint.bind(this),movedFun:this.movedTerminalAndControlPoint.bind(this)}):this.drawBezierPoint({x:t.points[o-1],y:i,stroke:"red",radius:3.5,info:{...n,indexPoint:o-1},movingFun:this.movingControlPoint.bind(this),movedFun:this.movedTerminalAndControlPoint.bind(this)})}})}})},pointPosition(t){switch(t.type){case"M":case"L":return{x:0,y:1};case"C":return{c1x:0,c1y:1,c2x:2,c2y:3,x:4,y:5}}},movingControlPoint(t){const{info:i,top:e,left:s}=t.target,n=this.findObjectDataById(i.id),o=s-n.svgPath[i.indexPath].points[i.indexPoint],a=e-n.svgPath[i.indexPath].points[i.indexPoint+1],h=n.svgPath[i.indexPath];if(h.points[i.indexPoint]+=o,h.points[i.indexPoint+1]+=a,0===i.indexPoint){const t=n.svgPath[i.indexPath-1];t&&"C"===t.type&&(t.points[this.pointPosition(t).c2x]=2*t.points[this.pointPosition(t).x]-h.points[i.indexPoint],t.points[this.pointPosition(t).c2y]=2*t.points[this.pointPosition(t).y]-h.points[i.indexPoint+1])}if(2===i.indexPoint){const t=n.svgPath[i.indexPath+1];t&&"C"===t.type&&(t.points[this.pointPosition(t).c1x]=2*h.points[this.pointPosition(h).x]-h.points[i.indexPoint],t.points[this.pointPosition(t).c1y]=2*h.points[this.pointPosition(h).y]-h.points[i.indexPoint+1])}this.drawPath({svgPath:n.svgPath,id:n.id,name:`allPath_${n.id}`,stroke:"blue"}),this.renderNodes(n)},movingTerminalPoint(t){const{info:i,top:e,left:s}=t.target,n=this.findObjectDataById(i.id),o=s-n.svgPath[i.indexPath].points[i.indexPoint],a=e-n.svgPath[i.indexPath].points[i.indexPoint+1];n.svgPath[i.indexPath].points[i.indexPoint]+=o,n.svgPath[i.indexPath].points[i.indexPoint+1]+=a,n.svgPath[i.indexPath].points[i.indexPoint-2]+=o,n.svgPath[i.indexPath].points[i.indexPoint-1]+=a;const h=n.svgPath[i.indexPath+1];h&&"C"===h.type&&(h.points[this.pointPosition(h).c1x]+=o,h.points[this.pointPosition(h).c1y]+=a),"line"===n.mode&&(n.length=this.calPathLength(n.svgPath)),this.drawPath({svgPath:n.svgPath,id:n.id,name:`allPath_${n.id}`,stroke:"blue"}),this.renderNodes(n)},movedTerminalAndControlPoint(t){const{info:i}=t.target,e=this.findObjectDataById(i.id);e.buffer=this.calAllBezierPoints(e.svgPath)},drawLine({p1:t,p2:i,name:e="line",stroke:s="grey"}){const n=new fabric.Line([t.x,t.y,i.x,i.y],{name:e,stroke:s,selectable:!1,hoverCursor:"default"});this.canvas.add(n),n.sendToBack()},findObjectDataById(t){return this.allDatas.filter(i=>i.id===t)[0]},findObjectById(t){return this.canvas._objects.filter(i=>i.id===t)[0]},drawPreviewPath(){if(this.currentData.svgPath.length<1)return;const t=this.currentData.svgPath[this.currentData.svgPath.length-1];let i=`\n      M ${t.points[t.points.length-2]} ${t.points[t.points.length-1]}\n      C ${this.bezierCurveCreator.controlPoint.x} ${this.bezierCurveCreator.controlPoint.y} ${this.mouse.position.x} ${this.mouse.position.y} ${this.mouse.position.x} ${this.mouse.position.y}`;this.removeObjectByName("previewPath");const e=new fabric.Path(i,{name:"previewPath",stroke:"#00000080",fill:"transparent",selectable:!1,hoverCursor:"default"});this.canvas.add(e),e.sendToBack()},removeObjectByName(t){this.canvas._objects.filter(i=>i.name===t).forEach(t=>this.canvas.remove(t))},convertSvgDataIntoPath(t){let i="";return t.forEach(t=>{i+=`${t.type} `,t.points.forEach(t=>{i+=`${t} `})}),i},calAllBezierPoints(t,i=400){const e=[];return t.forEach((t,s,n)=>{if(0===s)return;if("Z"===t.type)return;const o=n[s-1],a={x:null,y:null},h={x:null,y:null},r={x:null,y:null},d={x:null,y:null};switch(a.x=o.points[this.pointPosition(o).x],a.y=o.points[this.pointPosition(o).y],t.type){case"L":d.x=t.points[0],d.y=t.points[1];break;case"C":h.x=t.points[0],h.y=t.points[1],r.x=t.points[2],r.y=t.points[3],d.x=t.points[4],d.y=t.points[5]}const c=1/i,l={x:null,y:null};let u=0;for(u=0;u<1-c;u+=c)"C"===t.type&&(l.x=Math.pow(1-u,3)*a.x+3*Math.pow(1-u,2)*u*h.x+3*(1-u)*Math.pow(u,2)*r.x+Math.pow(u,3)*d.x,l.y=Math.pow(1-u,3)*a.y+3*Math.pow(1-u,2)*u*h.y+3*(1-u)*Math.pow(u,2)*r.y+Math.pow(u,3)*d.y),"L"===t.type&&(l.x=a.x*(1-u)+d.x*u,l.y=a.y*(1-u)+d.y*u),e.push(_.cloneDeep(l))}),e},resize(){this.canvasSize.width=.95*window.innerWidth,this.canvasSize.height=.7*window.innerHeight,this.canvas.setWidth(this.canvasSize.width),this.canvas.setHeight(this.canvasSize.height),this.canvas.renderAll()}}});window.addEventListener("keydown",app.keydown),window.addEventListener("resize",app.resize);